name: chapter_2 exercise_1 workflow

on:
    push:
        branches:
            - main

jobs:
    deploy-aws-lambda:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v2

            - name: Set up Python
              uses: actions/setup-python@v2
              with:
                python-version: '3.8'


            - name: Set up AWS CLI
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: us-east-1
            - name: package lambda function
              run: |
                cd ./chapter_2/exercise_1
                zip -r ../../function.zip hello.py
                cd ../../
            - name: Deploy lambda function
              run: |
                  aws lambda update-function-code --function-name lambda-test  --zip-file fileb://function.zip

            - name: Invoke lambda
              run: |
                  aws lambda invoke --function-name lambda-test --payload '{}' output.json
                  cat output.json
            # Deploy Gcloud deployment steps
            - name: gcloud authentication
              uses: google-github-actions/auth@v0.5.0
              with:
                credentials_json: ${{ secrets.GCLOUD_AUTH_JSON }}
                
            - name: Install Gcloud SDK # This is because github actions does not come with google sdk pre-installed
              run: |
                # The next command will update APT and install apt-transport-https, ca-certificates and gnupg which are necessary dependencies to securely download and verify software from external repositories
                sudo apt-get update && sudo apt-get install -y apt-transport-https ca-certificates gnupg 
                curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
                # The next command appends google cloud sdk to the list of package sources
                echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
                sudo apt-get update && sudo apt-get install google-cloud-cli
            - name: Create or update google cloud function #This is because gcloud functions provides the same command for both the creation and the update of functions
              run: |
                gcloud functions deploy hello-world
                --runtime python38
                --trigger-http
                --entry-point main
                --source./chapter_2/exercise_1/hello.py 
                --region us-central1
            - name: Test the function created and return the result on github actions terminal
              run: | #Be sure to create a gcloud project before running this yaml file and store the project ID in your github actions secret variables
                curl -X POST https://us-central1-${secrets.GCLOUD_PROJECT}.cloudfunctions.net/hello-world
                echo "Function execution successful."
            - name: azure authentication
              uses: azure/login@v1
              with:
                creds: ${{ secrets.AZURE_CREDENTIALS }} # To get the secret credentials you have to create a service principal using azure cli. Check out azure documentation to do so.
            - name: Install Azure Functions Core Tools
              run: |
                  npm install -g azure-functions-core-tools@3 --unsafe-perm true
            - name: Deploy Azure Function
              run: | # Create resource group, function app and storage if they don't exist
                cd chapter_2/exercise_1
                az functionapp create --resource-group group 
                                      --consumption-plan-location eastus \
                                      --runtime python \
                                      --functions-version 4 \
                                      --name helloworldkarimabousselham \
                                      --storage-account karimabousselham1991
                func azure functionapp publish helloworldkarimabousselham 

            - name: Invoke the Azure Function
              run: |
                FUNCTION_URL="https://helloworldkarimabousselham.azurewebsites.net/api/main"
                RESPONSE=$(curl -s $FUNCTION_URL)
                echo "Response from Azure Function: $RESPONSE"

